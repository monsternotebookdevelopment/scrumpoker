trigger:
- main # veya master

variables:
  azureSubscription: 'YOUR_AZURE_SERVICE_CONNECTION_NAME'
  acrName: 'youracrname'
  aksClusterName: 'your-aks-cluster-name'
  aksResourceGroup: 'your-aks-resource-group'
  imageRepository: 'monster-poker-frontend'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  nginxConfPath: '$(Build.SourcesDirectory)/nginx.conf' # Nginx conf dosyasının varlığından emin olun
  kubernetesManifestPath: '$(Build.SourcesDirectory)/k8s'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: BuildAndPush
  displayName: 'Build and Push Frontend Image'
  jobs:
  - job: Build
    displayName: 'Build and Push to ACR'
    steps:
    - task: Docker@2
      displayName: 'Build and push an image to container registry'
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        # Dockerfile ARG VITE_API_URL'e ihtiyaç kalmadığı için buildArgs kaldırıldı
        containerRegistry: $(acrName)
        tags: |
          $(Build.BuildId)
          latest

- stage: DeployToAKS
  displayName: 'Deploy Frontend to AKS'
  dependsOn: BuildAndPush
  jobs:
  - job: Deploy
    displayName: 'Deploy Kubernetes Manifests'
    steps:
    - task: Kubernetes@1
      displayName: 'kubectl apply'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: $(azureSubscription)
        resourceGroupName: $(aksResourceGroup)
        kubernetesClusterName: $(aksClusterName)
        command: 'apply'
        useConfigurationFile: true
        configurationType: 'directory'
        configuration: $(kubernetesManifestPath)
        # Sadece frontend ile ilgili dosyaları ve ingress'i belirtmek daha doğru olabilir:
        # arguments: '-f $(kubernetesManifestPath)/frontend-deployment.yaml -f $(kubernetesManifestPath)/frontend-service.yaml -f $(kubernetesManifestPath)/ingress.yaml'